#!/usr/bin/env python
#
#  Copyright (c) 2012, Sean Reifschneider, tummy.com, ltd.
#  All Rights Reserved.

'''
Command-line program to interact with network-attached-backup.  Run "help"
to get a list of commands.
'''

import os
import sys
sys.path.append('lib')              # ZFSBACKUPLIBDIR
import optparse
import subprocess

import nabsupp
from nabdb import *


def nabcmd_hosts(global_options, command, args):
    '''Show information about hosts.
    '''
    db = nabdb.session()
    for host in db.query(Host):
        print host.hostname


def nabcmd_initdb(global_options, command, args):
    '''Initialize the database if it does not already exist.
    '''
    nabdb.connect()
    nabdb.Base.metadata.create_all()


def nabcmd_newserver(global_options, command, args):
    '''Create the server record.
    '''
    parser = optparse.OptionParser(
            usage='%prog [GLOBAL ARGS] newserver [ARGS] <HOSTNAME>')
    parser.add_option('-s', '--scheduler-slots', dest='scheduler_slots',
            help='Slots in the scheduler for simultaneous backups',
            metavar='SLOTS', type="int")
    parser.add_option('-y', '--ssh-supports-y', dest='ssh_supports_y',
            help='Does the "ssh" command support the "-y" argument?  '
                'The default is "auto" which will try to detect, otherwise '
                'specify "yes" or "no".',
            default='auto', metavar='SSH_SUPPORTS_Y')
    (options, optargs) = parser.parse_args(args=args)

    if len(optargs) != 1:
        sys.stderr.write('ERROR: Hostname not specified on command-line.\n\n')
        parser.print_usage()
        sys.exit(1)

    db = nabdb.session()
    if len(list(db.query(BackupServer))) > 0:
        sys.stderr.write('ERROR: There is already a backup server defined.\n')
        sys.exit(1)

    server = BackupServer()
    server.hostname = optargs[0]

    if options.ssh_supports_y == 'auto':
        resp = nabsupp.run_command(['ssh', '-y'])
        if 'illegal option' in resp.stdout:
            server.ssh_supports_y = False
        else:
            server.ssh_supports_y = True
    elif options.ssh_supports_y[0] == 'y':
        server.ssh_supports_y = True
    elif options.ssh_supports_y[0] == 'n':
        server.ssh_supports_y = False
    else:
        sys.stderr.write('Error: Unknown value for "ssh_supports_y" option,\n'
                '   expecting "yes", "no", or "auto"\n')
        sys.exit(1)

    db.add(server)
    db.commit()


def nabcmd_listservers(global_options, command, args):
    '''List available servers.
    '''
    parser = optparse.OptionParser(
            usage='%prog [GLOBAL ARGS] listservers [ARGS]')
    (options, optargs) = parser.parse_args(args=args)

    db = nabdb.session()
    for host in db.query(BackupServer).order_by(BackupServer.hostname):
        print host.hostname


def nabcmd_newstorage(global_options, command, args):
    '''Create a storage backend
    '''
    parser = optparse.OptionParser(
            usage='%prog [GLOBAL ARGS] newstorage <BACKUP_SERVER> '
                '<METHOD> [METHOD_ARGS]')
    (options, optargs) = parser.parse_args(args=args)

    if len(optargs) != 2:
        sys.stderr.write('ERROR: Backup server and method must be specified '
                'on command-line\n\n')
        parser.print_usage()
        sys.exit(1)

    db = nabdb.session()
    server = db.query(BackupServer).filter_by(hostname=optargs[0]).first()

    storage = Storage()
    storage.backup_server = server
    storage.method = optargs[1]
    if len(optargs) == 3: storage.arg1 = optargs[2]
    if len(optargs) == 4: storage.arg2 = optargs[3]
    if len(optargs) == 5: storage.arg3 = optargs[4]
    if len(optargs) == 6: storage.arg4 = optargs[5]
    if len(optargs) == 7: storage.arg5 = optargs[6]

    db.add(storage)
    db.commit()


def nabcmd_liststorage(global_options, command, args):
    '''List available storage backends.
    '''
    parser = optparse.OptionParser(
            usage='%prog [GLOBAL ARGS] liststorage [ARGS]')
    (options, optargs) = parser.parse_args(args=args)

    db = nabdb.session()
    for row in db.query(Storage).order_by(Storage.id):
        print '%s (%s: %s)' % (( row.id, row.method )
                + tuple([ x for x in ( row.arg1, row.arg2, row.arg3, row.arg4,
                    row.arg5 ) if x ]))


def nabcmd_newhost(global_options, command, args):
    '''Create a host
    '''
    parser = optparse.OptionParser(
            usage='%prog [GLOBAL ARGS] newhost [ARGS] <HOSTNAME> <STORAGE_ID>')
    parser.add_option('-i', '--ip-address', dest='ip_address',
            help='IP address of host (otherwise, hostname is used)',
            metavar='ADDRESS')
    parser.add_option('-a', '--active', dest='active',
            help='Are backups being performed on the host?',
            default=None, choices=['y','n'], metavar='ACTIVE')
    parser.add_option('-s', '--window-start', dest='window_start',
            help='Beginning of backup window.',
            metavar='WINDOW_START')
    parser.add_option('-e', '--window-end', dest='window_end',
            help='End of backup window.',
            metavar='WINDOW_END')
    (options, optargs) = parser.parse_args(args=args)

    if len(optargs) != 2:
        sys.stderr.write('ERROR: Hostname and storage ID must be specified '
                'on command-line\n\n')
        parser.print_usage()
        sys.exit(1)

    db = nabdb.session()

    storage = db.query(Storage).filter_by(id=int(optargs[1])).first()

    host = Host()
    host.storage = storage
    host.hostname = optargs[0]
    if options.ip_address != None:
        host.ip_address = options.ip_address
    if options.active != None:
        host.active = options.active == 'y'
    if options.window_start != None:
        host.window_start = datetime.datetime.strptime(options.window_start,
                '%H:%M:%S').time()
    if options.window_end != None:
        host.window_end = datetime.datetime.strptime(options.window_end,
                '%H:%M:%S').time()

    db.add(host)
    db.commit()


def nabcmd_listhost(global_options, command, args):
    '''List available hosts
    '''
    parser = optparse.OptionParser(
            usage='%prog [GLOBAL ARGS] listhost [ARGS]')
    (options, optargs) = parser.parse_args(args=args)

    db = nabdb.session()
    for row in db.query(Host).order_by(Host.hostname):
        print '%s' % ( row.hostname, )


def print_command_help():
    commands = [x[7:] for x in globals().keys() if x.startswith('nabcmd_')]

    print
    print 'Where <COMMAND> is one of the following:\n'
    maxcmdlen = max([len(x) for x in commands])
    for command in sorted(commands):
        shorthelp = globals()['nabcmd_%s' % command].__doc__.split('\n')[0]
        print '   %-*s  %s' % (maxcmdlen, command, shorthelp)
    print
    print 'Use "<COMMAND> --help" for more information about that command.'


def nab_cli_main():
    '''Main part of the "nab" command-line program.'''

    commands = [x[7:] for x in globals().keys() if x.startswith('nabcmd_')]

    parser = optparse.OptionParser(add_help_option=False,
            usage='%prog [GLOBAL ARGS] <COMMAND> [COMMAND ARGS]')
    parser.disable_interspersed_args()
    parser.add_option('--verbose', action='store_true', dest='verbose',
            help='Display more information about the operation')
    parser.add_option('--debug', action='store_true', dest='debug',
            help='Display additional debugging information.')
    (options, optargs) = parser.parse_args()

    if len(optargs) < 1:
        parser.print_help()
        print_command_help()
        sys.exit(1)
    if optargs[0] == 'help':
        parser.print_help()
        print_command_help()
        sys.exit(0)
    if optargs[0] not in commands:
        sys.stderr.write('ERROR: Unknown command "%s"\n\n' % optargs[0])
        parser.print_help()
        print_command_help()
        sys.exit(1)

    globals()['nabcmd_%s' % optargs[0]](options, optargs[0], optargs[1:])


################################
nab_cli_main()
